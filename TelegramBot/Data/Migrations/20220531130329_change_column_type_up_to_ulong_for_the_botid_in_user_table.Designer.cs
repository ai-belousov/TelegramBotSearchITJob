// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TelegramBot.Data;

#nullable disable

namespace TelegramBot.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220531130329_change_column_type_up_to_ulong_for_the_botid_in_user_table")]
    partial class change_column_type_up_to_ulong_for_the_botid_in_user_table
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TelegramBot.Data.Models.Bot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Название бота");

                    b.Property<long>("TelegramBotId")
                        .HasColumnType("bigint")
                        .HasColumnName("telegram_bot_id")
                        .HasComment("id телеграм бота");

                    b.Property<string>("TelegramBotToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("telegram_bot_token")
                        .HasComment("Token телеграм бота");

                    b.HasKey("Id");

                    b.ToTable("bot");

                    b.HasComment("Телеграм боты");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Поиск IT-вакансий",
                            TelegramBotId = 5179375578L,
                            TelegramBotToken = "AAHgamcmzMRG1M39RFvGPglgXKxuD44lGd8"
                        });
                });

            modelBuilder.Entity("TelegramBot.Data.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BotId")
                        .HasColumnType("integer")
                        .HasColumnName("bot_id")
                        .HasComment("id бота");

                    b.Property<int>("TypeMenuId")
                        .HasColumnType("integer")
                        .HasColumnName("type_menu_id")
                        .HasComment("id типа меню");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value")
                        .HasComment("Значение кнопки меню");

                    b.HasKey("Id");

                    b.HasIndex("BotId");

                    b.HasIndex("TypeMenuId");

                    b.ToTable("menu");

                    b.HasComment("Меню(кнопки выбора) бота");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BotId = 1,
                            TypeMenuId = 1,
                            Value = "Java/Scala"
                        },
                        new
                        {
                            Id = 2,
                            BotId = 1,
                            TypeMenuId = 1,
                            Value = "Python"
                        },
                        new
                        {
                            Id = 3,
                            BotId = 1,
                            TypeMenuId = 1,
                            Value = "C#"
                        },
                        new
                        {
                            Id = 4,
                            BotId = 1,
                            TypeMenuId = 1,
                            Value = "C/C++"
                        },
                        new
                        {
                            Id = 5,
                            BotId = 1,
                            TypeMenuId = 1,
                            Value = "Go"
                        },
                        new
                        {
                            Id = 6,
                            BotId = 1,
                            TypeMenuId = 1,
                            Value = "Ruby"
                        },
                        new
                        {
                            Id = 7,
                            BotId = 1,
                            TypeMenuId = 1,
                            Value = "PHP"
                        },
                        new
                        {
                            Id = 8,
                            BotId = 1,
                            TypeMenuId = 1,
                            Value = "Frontend"
                        },
                        new
                        {
                            Id = 9,
                            BotId = 1,
                            TypeMenuId = 1,
                            Value = "Node.js"
                        },
                        new
                        {
                            Id = 10,
                            BotId = 1,
                            TypeMenuId = 1,
                            Value = "DevOps"
                        },
                        new
                        {
                            Id = 11,
                            BotId = 1,
                            TypeMenuId = 1,
                            Value = "QA Manual"
                        },
                        new
                        {
                            Id = 12,
                            BotId = 1,
                            TypeMenuId = 1,
                            Value = "QA Auto"
                        },
                        new
                        {
                            Id = 13,
                            BotId = 1,
                            TypeMenuId = 1,
                            Value = "Data Scientist"
                        },
                        new
                        {
                            Id = 14,
                            BotId = 1,
                            TypeMenuId = 1,
                            Value = "Product Manager"
                        },
                        new
                        {
                            Id = 15,
                            BotId = 1,
                            TypeMenuId = 1,
                            Value = "Product Analyst"
                        },
                        new
                        {
                            Id = 16,
                            BotId = 1,
                            TypeMenuId = 1,
                            Value = "Project Manager"
                        },
                        new
                        {
                            Id = 17,
                            BotId = 1,
                            TypeMenuId = 1,
                            Value = "CTO / Architect"
                        },
                        new
                        {
                            Id = 18,
                            BotId = 1,
                            TypeMenuId = 1,
                            Value = "Design & UX"
                        },
                        new
                        {
                            Id = 19,
                            BotId = 1,
                            TypeMenuId = 1,
                            Value = "System Analyst"
                        },
                        new
                        {
                            Id = 20,
                            BotId = 1,
                            TypeMenuId = 1,
                            Value = "IT HR / Recruiter"
                        },
                        new
                        {
                            Id = 21,
                            BotId = 1,
                            TypeMenuId = 2,
                            Value = "Москва (гибрад или офис)"
                        },
                        new
                        {
                            Id = 22,
                            BotId = 1,
                            TypeMenuId = 2,
                            Value = "Санкт-Петербург (гибрад или офис)"
                        },
                        new
                        {
                            Id = 23,
                            BotId = 1,
                            TypeMenuId = 2,
                            Value = "Полная удаленка"
                        },
                        new
                        {
                            Id = 24,
                            BotId = 1,
                            TypeMenuId = 2,
                            Value = "Релокейт за рубеж"
                        },
                        new
                        {
                            Id = 25,
                            BotId = 1,
                            TypeMenuId = 3,
                            Value = "от 150К ₽/мес"
                        },
                        new
                        {
                            Id = 26,
                            BotId = 1,
                            TypeMenuId = 3,
                            Value = "от 200К ₽/мес"
                        },
                        new
                        {
                            Id = 27,
                            BotId = 1,
                            TypeMenuId = 3,
                            Value = "от 250К ₽/мес"
                        },
                        new
                        {
                            Id = 28,
                            BotId = 1,
                            TypeMenuId = 3,
                            Value = "от 350К ₽/мес"
                        });
                });

            modelBuilder.Entity("TelegramBot.Data.Models.TypeMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Тип меню");

                    b.HasKey("Id");

                    b.ToTable("type_menu", (string)null);

                    b.HasComment("Типы меню");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Специальность"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Формат работы"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Зарплата"
                        });
                });

            modelBuilder.Entity("TelegramBot.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email")
                        .HasComment("Почта пользователя");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nickname")
                        .HasComment("Ник пользователя");

                    b.Property<decimal>("UserBotId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_bot_id")
                        .HasComment("Пользователи телеграм");

                    b.HasKey("Id");

                    b.ToTable("user");

                    b.HasComment("Пользователи");
                });

            modelBuilder.Entity("TelegramBot.Data.Models.UserSettings", b =>
                {
                    b.Property<int>("MenuId")
                        .HasColumnType("integer")
                        .HasColumnName("menu_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasComment("Дата создания");

                    b.HasKey("MenuId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("user_settings");

                    b.HasComment("Настройки пользователей");
                });

            modelBuilder.Entity("TelegramBot.Data.Models.Menu", b =>
                {
                    b.HasOne("TelegramBot.Data.Models.Bot", "Bot")
                        .WithMany("Menus")
                        .HasForeignKey("BotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TelegramBot.Data.Models.TypeMenu", "TypeMenu")
                        .WithMany("Menus")
                        .HasForeignKey("TypeMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bot");

                    b.Navigation("TypeMenu");
                });

            modelBuilder.Entity("TelegramBot.Data.Models.UserSettings", b =>
                {
                    b.HasOne("TelegramBot.Data.Models.Menu", "Menu")
                        .WithMany("UserSettingsList")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TelegramBot.Data.Models.User", "User")
                        .WithMany("UserSettingsList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TelegramBot.Data.Models.Bot", b =>
                {
                    b.Navigation("Menus");
                });

            modelBuilder.Entity("TelegramBot.Data.Models.Menu", b =>
                {
                    b.Navigation("UserSettingsList");
                });

            modelBuilder.Entity("TelegramBot.Data.Models.TypeMenu", b =>
                {
                    b.Navigation("Menus");
                });

            modelBuilder.Entity("TelegramBot.Data.Models.User", b =>
                {
                    b.Navigation("UserSettingsList");
                });
#pragma warning restore 612, 618
        }
    }
}
